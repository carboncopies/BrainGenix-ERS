# This file is a template, and might need editing before it works on your project.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml


variables:
  DOCKER_REGISTRY: "10.1.3.11:5000"
  NUMBER_THREADS: "24"

  PLATFORM_BUILD_PREAMBLE "ERS_$CI_COMMIT_SHORT_SHA"

stages:          # List of stages for jobs, and their order of execution
  - Build
  - Platform Build Testing
#  - test
#  - deploy




## BUILD STAGE ITEMS HERE ##

# Main build for compiling the main project executable.
Main Build:
  image: "$DOCKER_REGISTRY/ers_build_linux_ubuntu_2204:latest"
  tags:
   - linux
  stage: Build
  script:
    - cd CI/Pipelines/MainBuild
    - bash Run.sh $NUMBER_THREADS
  artifacts:
    name: "Build_BrainGenix-ERS_$CI_COMMIT_SHORT_SHA"
    paths:
      - Binaries/


# Generates Doxygen Docs And Adds Them To Archive
Generate Documentation:
  image: "$DOCKER_REGISTRY/ers_generate_docs_image:latest"
  stage: Build
  tags:
    - linux
  script:
    - cd CI/Pipelines/GenerateDocs
    - bash Run.sh
  artifacts:
    name: "Docs_BrainGenix-ERS_$CI_COMMIT_SHORT_SHA"
    paths:
      - Docs/Doxygen/Generated/


## PLATFORM BUILD TESTING HERE ##

# Ensure ERS compiles on ubuntu 22.04
Ubuntu 22.04 Build:
  image: "$DOCKER_REGISTRY/ers_build_linux_ubuntu_2204:latest"
  tags:
   - linux
  stage: Platform Build Testing
  script:
    - cd CI/Pipelines/MainBuild
    - bash Run.sh $NUMBER_THREADS
  artifacts:
    name: "$PLATFORM_BUILD_PREAMBLE-Ubuntu22.04"
    paths:
      - Binaries/

# Ensure ERS compiles on ubuntu 20.04
Ubuntu 20.04 Build:
  image: "$DOCKER_REGISTRY/ers_build_linux_ubuntu_2004:latest"
  tags:
   - linux
  stage: Platform Build Testing
  script:
    - cd CI/Pipelines/MainBuild
    - bash Run.sh $NUMBER_THREADS
  artifacts:
    name: "$PLATFORM_BUILD_PREAMBLE-Ubuntu20.04"
    paths:
      - Binaries/

# Ensure ERS compiles on ubuntu 23.04
Ubuntu 23.04 Build:
  image: "$DOCKER_REGISTRY/ers_build_linux_ubuntu_2304:latest"
  tags:
   - linux
  stage: Platform Build Testing
  script:
    - cd CI/Pipelines/MainBuild
    - bash Run.sh $NUMBER_THREADS
  artifacts:
    name: "$PLATFORM_BUILD_PREAMBLE-Ubuntu23.04"
    paths:
      - Binaries/

# Ensure ERS compiles on debian 11
Debian 11 Build:
  image: "$DOCKER_REGISTRY/ers_build_linux_debian_11:latest"
  tags:
   - linux
  stage: Platform Build Testing
  script:
    - cd CI/Pipelines/MainBuild
    - bash Run.sh $NUMBER_THREADS
  artifacts:
    name: "$PLATFORM_BUILD_PREAMBLE-Debian11"
    paths:
      - Binaries/

# Ensure ERS compiles on debian 10
Debian 10 Build:
  image: "$DOCKER_REGISTRY/ers_build_linux_debian_11:latest"
  tags:
   - linux
  stage: Platform Build Testing
  script:
    - cd CI/Pipelines/MainBuild
    - bash Run.sh $NUMBER_THREADS
  artifacts:
    name: "ERS_DEBIAN10_$CI_COMMIT_SHORT_SHA"
    paths:
      - Binaries/







#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"

#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."

#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."
