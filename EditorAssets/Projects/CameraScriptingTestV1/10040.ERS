#version 330 core

// Set Inputs
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

// Set Outputs
out VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    mat3 TBN;
    vec3 WorldPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
    vec3 Normal; // Used when no normal map is available;

    //vec4 FragPosLightSpace;
} Object;



// Get Metadata Params
uniform float Time; // Time since program started in seconds
uniform float FrameTime; // Render Time Of The Frame
uniform int FrameNumber; // Number of the frame, counts up from zero
uniform vec2 ViewportRes; // XY Resolution of the viewport

// Get Mesh Info
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform mat4 LightSpaceMatrix;

// Get Camera Info
uniform vec3 CameraPosition;

// Get Normal Info
uniform bool HasNormals;

void main()
{
    Object.FragPos = vec3(model * vec4(aPos, 1.0));
    Object.TexCoords = aTexCoords;
    
    mat3 NormalMatrix = transpose(inverse(mat3(model)));
    vec3 T = normalize(NormalMatrix * aTangent);
    vec3 N = normalize(NormalMatrix * aNormal);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    
    mat3 TBN = transpose(mat3(T, B, N));
    Object.TBN = TBN;
    Object.TangentViewPos = TBN * CameraPosition;
    Object.TangentFragPos = TBN * Object.FragPos;
    Object.Normal = mat3(model) * aNormal; // mat3(transpose(inverse(model))) * aNormal;
    Object.WorldPos = vec3(model*vec4(aPos, 1.0f));
    //Object.FragPosLightSpace = LightSpaceMatrix * vec4(Object.FragPos, 1.0f);
    gl_Position = projection * view * vec4(Object.WorldPos, 1.0f);

}













