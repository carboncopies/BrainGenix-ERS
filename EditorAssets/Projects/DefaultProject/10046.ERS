#version 330 core
layout (triangles) in;
layout (triangle_strip, max_vertices=18) out;

uniform mat4 ShadowMatrices[6];
uniform int ShadowMapLayer;

out vec4 FragPos; // FragPos from GS (output per emitvertex)

void main()
{
    for(int face = 0; face < 6; ++face)
    {
        gl_Layer = (ShadowMapLayer*6) + face; // built-in variable that specifies to which face we render.
        for(int i = 0; i < 3; ++i) // for each triangle's vertices
        {
            FragPos = gl_in[i].gl_Position;
            gl_Position = ShadowMatrices[face] * FragPos;
            EmitVertex();
        }    
        EndPrimitive();
    }
} 




/**

Fix For Transparency (Andrei Despinoiu)


#version 330 core
layout (triangles) in;
layout (triangle_strip, max_vertices=18) out;


in vec2 TexCoordsInitial[]; // Needs to be declared as an array
out vec2 TexCoords;
out vec4 FragPos; // FragPos from GS (output per emitvertex)


uniform mat4 shadowMatrices[6];


void main()
{
    for(int face = 0; face < 6; ++face)
    {
        gl_Layer = face; // built-in variable that specifies to which face we render
        for(int i = 0; i < 3; ++i) // for each triangle's vertices
        {
            TexCoords = TexCoordsInitial[i];
            FragPos = gl_in[i].gl_Position;
            gl_Position = shadowMatrices[face] * FragPos;
            EmitVertex();
        }
        EndPrimitive();
    }
}

**/
